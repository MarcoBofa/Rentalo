// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  surname   String?
  email     String   @unique
  image     String?  
  piva      String?
  birthDate String?
  role      String   @default("noleggiatore")
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  hashedPassword String? //optional for allowing social login

  // New fields for email verification
  email_verified             Boolean @default(false)
  emailVerificationToken    String? 

  // New fields for reset password functionality
  resetPasswordToken        String? 
  resetPasswordTokenExpiry  DateTime? 

  // Existing relations
  macchina                  macchina[]
  accounts                  Account[]
  sollevamento              sollevamento[]
  attrezzatura              attrezzatura[]
  autocarri                 autocarri[]
  pale                      pale[]
  
  emailVerified             DateTime?
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model richiestaNoleggio {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  email        String   
  telefono     String  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  macchinari   Macchinario[]
}

model propostaNoleggio {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  email        String   
  telefono     String
  impresa      Boolean  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  macchinari   Macchinario[]
}

model Macchinario {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  richiestaId     String?           @map("richiesta_id") @db.ObjectId
  propostaId      String?           @map("proposta_id") @db.ObjectId
  tipo            String
  regione         String
  descrizione     String
  operatore       Boolean
  richiesta       richiestaNoleggio? @relation(fields: [richiestaId], references: [id])
  proposta        propostaNoleggio?  @relation(fields: [propostaId], references: [id])
}

//macchinario was already in use
model macchina {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  modello     String
  produttore  String
  tipo        String
  peso        Int
  dimensioni  String
  aziendaId   String @db.ObjectId
  azienda    User? @relation(fields: [aziendaId], references: [id])

}


model annuncio {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  titolo      String
  descrizione String
  tipo        String
  prezzo      Int
  immagini    String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  aziendaId   String @db.ObjectId

}

model sollevamento {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  descrizione String
  tipo        String
  peso        Int?
  portata     Int?
  lunghezza   Int?
  altezza     Int?
  altezzaLavoro     Int?
  dimensioneCarro   String?
  produttore  String?
  attributi   Json?
  aziendaId   String @db.ObjectId
  azienda    User? @relation(fields: [aziendaId], references: [id])

}

model attrezzatura {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  descrizione String
  tipo        String
  peso        Int?
  produttore  String?
  attributi   Json?
  aziendaId   String @db.ObjectId
  azienda    User? @relation(fields: [aziendaId], references: [id])

}

model autocarri {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nome     String
  descrizione String
  tipo        String
  peso        Int?
  portata     Int?
  altezzaLavoro     Int?
  dimensioneCassone String?
  dimensioneCarro   String?
  produttore  String?
  attributi   Json?
  aziendaId   String @db.ObjectId
  azienda    User? @relation(fields: [aziendaId], references: [id])

}

model pale {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  descrizione String
  tipo        String
  peso        Int?
  produttore  String?
  attributi   Json?
  aziendaId   String @db.ObjectId
  azienda    User? @relation(fields: [aziendaId], references: [id])

}

// model recensione {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   punteggio   Int
//   commento    String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   aziendaId   String @db.ObjectId
//   clienteId   String @db.ObjectId
//   azienda     User? @relation(fields: [aziendaId], references: [id])
//   cliente     User? @relation(fields: [clienteId], references: [id])
// }
